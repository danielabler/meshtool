// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CORNEA_MESHING_SCHEMA_HXX
#define CORNEA_MESHING_SCHEMA_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class ZernikeCoefficientType;
class ZernikeCoefficientType_single_index;
class ZernikeSurfaceType;
class MeshCriteriaGlobalType;
class CorneaGenerationCriteriaGlobalType;
class LenticuleGenerationCriteriaGlobalType;
class ConeBoundaryType;
class CylinderBoundaryType;
class CorneaBoundaryType;
class CorneaMeshingParametersType;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class ZernikeCoefficientType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type >
{
  public:
  // n
  //
  typedef ::xml_schema::integer n_type;
  typedef ::xsd::cxx::tree::traits< n_type, char > n_traits;

  const n_type&
  n () const;

  n_type&
  n ();

  void
  n (const n_type& x);

  // m
  //
  typedef ::xml_schema::integer m_type;
  typedef ::xsd::cxx::tree::traits< m_type, char > m_traits;

  const m_type&
  m () const;

  m_type&
  m ();

  void
  m (const m_type& x);

  // Constructors.
  //
  ZernikeCoefficientType (const ::xml_schema::float_&,
                          const n_type&,
                          const m_type&);

  ZernikeCoefficientType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  ZernikeCoefficientType (const ZernikeCoefficientType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual ZernikeCoefficientType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ZernikeCoefficientType&
  operator= (const ZernikeCoefficientType& x);

  virtual 
  ~ZernikeCoefficientType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< n_type > n_;
  ::xsd::cxx::tree::one< m_type > m_;
};

class ZernikeCoefficientType_single_index: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type >
{
  public:
  // j
  //
  typedef ::xml_schema::integer j_type;
  typedef ::xsd::cxx::tree::traits< j_type, char > j_traits;

  const j_type&
  j () const;

  j_type&
  j ();

  void
  j (const j_type& x);

  // Constructors.
  //
  ZernikeCoefficientType_single_index (const ::xml_schema::float_&,
                                       const j_type&);

  ZernikeCoefficientType_single_index (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  ZernikeCoefficientType_single_index (const ZernikeCoefficientType_single_index& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

  virtual ZernikeCoefficientType_single_index*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ZernikeCoefficientType_single_index&
  operator= (const ZernikeCoefficientType_single_index& x);

  virtual 
  ~ZernikeCoefficientType_single_index ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< j_type > j_;
};

class ZernikeSurfaceType: public ::xml_schema::type
{
  public:
  // ZernikeCoefficient
  //
  typedef ::ZernikeCoefficientType ZernikeCoefficient_type;
  typedef ::xsd::cxx::tree::sequence< ZernikeCoefficient_type > ZernikeCoefficient_sequence;
  typedef ZernikeCoefficient_sequence::iterator ZernikeCoefficient_iterator;
  typedef ZernikeCoefficient_sequence::const_iterator ZernikeCoefficient_const_iterator;
  typedef ::xsd::cxx::tree::traits< ZernikeCoefficient_type, char > ZernikeCoefficient_traits;

  const ZernikeCoefficient_sequence&
  ZernikeCoefficient () const;

  ZernikeCoefficient_sequence&
  ZernikeCoefficient ();

  void
  ZernikeCoefficient (const ZernikeCoefficient_sequence& s);

  // ZernikeCoefficientSingleIndex
  //
  typedef ::ZernikeCoefficientType_single_index ZernikeCoefficientSingleIndex_type;
  typedef ::xsd::cxx::tree::sequence< ZernikeCoefficientSingleIndex_type > ZernikeCoefficientSingleIndex_sequence;
  typedef ZernikeCoefficientSingleIndex_sequence::iterator ZernikeCoefficientSingleIndex_iterator;
  typedef ZernikeCoefficientSingleIndex_sequence::const_iterator ZernikeCoefficientSingleIndex_const_iterator;
  typedef ::xsd::cxx::tree::traits< ZernikeCoefficientSingleIndex_type, char > ZernikeCoefficientSingleIndex_traits;

  const ZernikeCoefficientSingleIndex_sequence&
  ZernikeCoefficientSingleIndex () const;

  ZernikeCoefficientSingleIndex_sequence&
  ZernikeCoefficientSingleIndex ();

  void
  ZernikeCoefficientSingleIndex (const ZernikeCoefficientSingleIndex_sequence& s);

  // Constructors.
  //
  ZernikeSurfaceType ();

  ZernikeSurfaceType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  ZernikeSurfaceType (const ZernikeSurfaceType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual ZernikeSurfaceType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ZernikeSurfaceType&
  operator= (const ZernikeSurfaceType& x);

  virtual 
  ~ZernikeSurfaceType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ZernikeCoefficient_sequence ZernikeCoefficient_;
  ZernikeCoefficientSingleIndex_sequence ZernikeCoefficientSingleIndex_;
};

class MeshCriteriaGlobalType: public ::xml_schema::type
{
  public:
  // facet_angle
  //
  typedef ::xml_schema::double_ facet_angle_type;
  typedef ::xsd::cxx::tree::traits< facet_angle_type, char, ::xsd::cxx::tree::schema_type::double_ > facet_angle_traits;

  const facet_angle_type&
  facet_angle () const;

  facet_angle_type&
  facet_angle ();

  void
  facet_angle (const facet_angle_type& x);

  // facet_size
  //
  typedef ::xml_schema::double_ facet_size_type;
  typedef ::xsd::cxx::tree::traits< facet_size_type, char, ::xsd::cxx::tree::schema_type::double_ > facet_size_traits;

  const facet_size_type&
  facet_size () const;

  facet_size_type&
  facet_size ();

  void
  facet_size (const facet_size_type& x);

  // facet_distance
  //
  typedef ::xml_schema::double_ facet_distance_type;
  typedef ::xsd::cxx::tree::traits< facet_distance_type, char, ::xsd::cxx::tree::schema_type::double_ > facet_distance_traits;

  const facet_distance_type&
  facet_distance () const;

  facet_distance_type&
  facet_distance ();

  void
  facet_distance (const facet_distance_type& x);

  // cell_radius_edge_ratio
  //
  typedef ::xml_schema::double_ cell_radius_edge_ratio_type;
  typedef ::xsd::cxx::tree::traits< cell_radius_edge_ratio_type, char, ::xsd::cxx::tree::schema_type::double_ > cell_radius_edge_ratio_traits;

  const cell_radius_edge_ratio_type&
  cell_radius_edge_ratio () const;

  cell_radius_edge_ratio_type&
  cell_radius_edge_ratio ();

  void
  cell_radius_edge_ratio (const cell_radius_edge_ratio_type& x);

  // cell_size
  //
  typedef ::xml_schema::double_ cell_size_type;
  typedef ::xsd::cxx::tree::traits< cell_size_type, char, ::xsd::cxx::tree::schema_type::double_ > cell_size_traits;

  const cell_size_type&
  cell_size () const;

  cell_size_type&
  cell_size ();

  void
  cell_size (const cell_size_type& x);

  // Constructors.
  //
  MeshCriteriaGlobalType (const facet_angle_type&,
                          const facet_size_type&,
                          const facet_distance_type&,
                          const cell_radius_edge_ratio_type&,
                          const cell_size_type&);

  MeshCriteriaGlobalType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  MeshCriteriaGlobalType (const MeshCriteriaGlobalType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual MeshCriteriaGlobalType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  MeshCriteriaGlobalType&
  operator= (const MeshCriteriaGlobalType& x);

  virtual 
  ~MeshCriteriaGlobalType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< facet_angle_type > facet_angle_;
  ::xsd::cxx::tree::one< facet_size_type > facet_size_;
  ::xsd::cxx::tree::one< facet_distance_type > facet_distance_;
  ::xsd::cxx::tree::one< cell_radius_edge_ratio_type > cell_radius_edge_ratio_;
  ::xsd::cxx::tree::one< cell_size_type > cell_size_;
};

class CorneaGenerationCriteriaGlobalType: public ::xml_schema::type
{
  public:
  // max_number_zernike_coeffs
  //
  typedef ::xml_schema::int_ max_number_zernike_coeffs_type;
  typedef ::xsd::cxx::tree::traits< max_number_zernike_coeffs_type, char > max_number_zernike_coeffs_traits;

  const max_number_zernike_coeffs_type&
  max_number_zernike_coeffs () const;

  max_number_zernike_coeffs_type&
  max_number_zernike_coeffs ();

  void
  max_number_zernike_coeffs (const max_number_zernike_coeffs_type& x);

  // surface_thickness
  //
  typedef ::xml_schema::double_ surface_thickness_type;
  typedef ::xsd::cxx::tree::traits< surface_thickness_type, char, ::xsd::cxx::tree::schema_type::double_ > surface_thickness_traits;

  const surface_thickness_type&
  surface_thickness () const;

  surface_thickness_type&
  surface_thickness ();

  void
  surface_thickness (const surface_thickness_type& x);

  // offset_along_z
  //
  typedef ::xml_schema::double_ offset_along_z_type;
  typedef ::xsd::cxx::tree::traits< offset_along_z_type, char, ::xsd::cxx::tree::schema_type::double_ > offset_along_z_traits;

  const offset_along_z_type&
  offset_along_z () const;

  offset_along_z_type&
  offset_along_z ();

  void
  offset_along_z (const offset_along_z_type& x);

  // path_to_output
  //
  typedef ::xml_schema::string path_to_output_type;
  typedef ::xsd::cxx::tree::traits< path_to_output_type, char > path_to_output_traits;

  const path_to_output_type&
  path_to_output () const;

  path_to_output_type&
  path_to_output ();

  void
  path_to_output (const path_to_output_type& x);

  void
  path_to_output (::std::auto_ptr< path_to_output_type > p);

  // Constructors.
  //
  CorneaGenerationCriteriaGlobalType (const max_number_zernike_coeffs_type&,
                                      const surface_thickness_type&,
                                      const offset_along_z_type&,
                                      const path_to_output_type&);

  CorneaGenerationCriteriaGlobalType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  CorneaGenerationCriteriaGlobalType (const CorneaGenerationCriteriaGlobalType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

  virtual CorneaGenerationCriteriaGlobalType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  CorneaGenerationCriteriaGlobalType&
  operator= (const CorneaGenerationCriteriaGlobalType& x);

  virtual 
  ~CorneaGenerationCriteriaGlobalType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< max_number_zernike_coeffs_type > max_number_zernike_coeffs_;
  ::xsd::cxx::tree::one< surface_thickness_type > surface_thickness_;
  ::xsd::cxx::tree::one< offset_along_z_type > offset_along_z_;
  ::xsd::cxx::tree::one< path_to_output_type > path_to_output_;
};

class LenticuleGenerationCriteriaGlobalType: public ::xml_schema::type
{
  public:
  // max_number_zernike_coeffs
  //
  typedef ::xml_schema::int_ max_number_zernike_coeffs_type;
  typedef ::xsd::cxx::tree::traits< max_number_zernike_coeffs_type, char > max_number_zernike_coeffs_traits;

  const max_number_zernike_coeffs_type&
  max_number_zernike_coeffs () const;

  max_number_zernike_coeffs_type&
  max_number_zernike_coeffs ();

  void
  max_number_zernike_coeffs (const max_number_zernike_coeffs_type& x);

  // lenticule_radius
  //
  typedef ::xml_schema::double_ lenticule_radius_type;
  typedef ::xsd::cxx::tree::traits< lenticule_radius_type, char, ::xsd::cxx::tree::schema_type::double_ > lenticule_radius_traits;

  const lenticule_radius_type&
  lenticule_radius () const;

  lenticule_radius_type&
  lenticule_radius ();

  void
  lenticule_radius (const lenticule_radius_type& x);

  // cap_thickness
  //
  typedef ::xml_schema::double_ cap_thickness_type;
  typedef ::xsd::cxx::tree::traits< cap_thickness_type, char, ::xsd::cxx::tree::schema_type::double_ > cap_thickness_traits;

  const cap_thickness_type&
  cap_thickness () const;

  cap_thickness_type&
  cap_thickness ();

  void
  cap_thickness (const cap_thickness_type& x);

  // lenticule_thickness
  //
  typedef ::xml_schema::double_ lenticule_thickness_type;
  typedef ::xsd::cxx::tree::traits< lenticule_thickness_type, char, ::xsd::cxx::tree::schema_type::double_ > lenticule_thickness_traits;

  const lenticule_thickness_type&
  lenticule_thickness () const;

  lenticule_thickness_type&
  lenticule_thickness ();

  void
  lenticule_thickness (const lenticule_thickness_type& x);

  // lenticule_surface_distance
  //
  typedef ::xml_schema::double_ lenticule_surface_distance_type;
  typedef ::xsd::cxx::tree::traits< lenticule_surface_distance_type, char, ::xsd::cxx::tree::schema_type::double_ > lenticule_surface_distance_traits;

  const lenticule_surface_distance_type&
  lenticule_surface_distance () const;

  lenticule_surface_distance_type&
  lenticule_surface_distance ();

  void
  lenticule_surface_distance (const lenticule_surface_distance_type& x);

  // Constructors.
  //
  LenticuleGenerationCriteriaGlobalType (const max_number_zernike_coeffs_type&,
                                         const lenticule_radius_type&,
                                         const cap_thickness_type&,
                                         const lenticule_thickness_type&,
                                         const lenticule_surface_distance_type&);

  LenticuleGenerationCriteriaGlobalType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  LenticuleGenerationCriteriaGlobalType (const LenticuleGenerationCriteriaGlobalType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

  virtual LenticuleGenerationCriteriaGlobalType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  LenticuleGenerationCriteriaGlobalType&
  operator= (const LenticuleGenerationCriteriaGlobalType& x);

  virtual 
  ~LenticuleGenerationCriteriaGlobalType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< max_number_zernike_coeffs_type > max_number_zernike_coeffs_;
  ::xsd::cxx::tree::one< lenticule_radius_type > lenticule_radius_;
  ::xsd::cxx::tree::one< cap_thickness_type > cap_thickness_;
  ::xsd::cxx::tree::one< lenticule_thickness_type > lenticule_thickness_;
  ::xsd::cxx::tree::one< lenticule_surface_distance_type > lenticule_surface_distance_;
};

class ConeBoundaryType: public ::xml_schema::type
{
  public:
  // angle
  //
  typedef ::xml_schema::double_ angle_type;
  typedef ::xsd::cxx::tree::traits< angle_type, char, ::xsd::cxx::tree::schema_type::double_ > angle_traits;

  const angle_type&
  angle () const;

  angle_type&
  angle ();

  void
  angle (const angle_type& x);

  // Constructors.
  //
  ConeBoundaryType (const angle_type&);

  ConeBoundaryType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  ConeBoundaryType (const ConeBoundaryType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual ConeBoundaryType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ConeBoundaryType&
  operator= (const ConeBoundaryType& x);

  virtual 
  ~ConeBoundaryType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< angle_type > angle_;
};

class CylinderBoundaryType: public ::xml_schema::type
{
  public:
  // radius
  //
  typedef ::xml_schema::double_ radius_type;
  typedef ::xsd::cxx::tree::traits< radius_type, char, ::xsd::cxx::tree::schema_type::double_ > radius_traits;

  const radius_type&
  radius () const;

  radius_type&
  radius ();

  void
  radius (const radius_type& x);

  // Constructors.
  //
  CylinderBoundaryType (const radius_type&);

  CylinderBoundaryType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  CylinderBoundaryType (const CylinderBoundaryType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual CylinderBoundaryType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  CylinderBoundaryType&
  operator= (const CylinderBoundaryType& x);

  virtual 
  ~CylinderBoundaryType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< radius_type > radius_;
};

class CorneaBoundaryType: public ::xml_schema::type
{
  public:
  // Cone
  //
  typedef ::ConeBoundaryType Cone_type;
  typedef ::xsd::cxx::tree::optional< Cone_type > Cone_optional;
  typedef ::xsd::cxx::tree::traits< Cone_type, char > Cone_traits;

  const Cone_optional&
  Cone () const;

  Cone_optional&
  Cone ();

  void
  Cone (const Cone_type& x);

  void
  Cone (const Cone_optional& x);

  void
  Cone (::std::auto_ptr< Cone_type > p);

  // Cylinder
  //
  typedef ::CylinderBoundaryType Cylinder_type;
  typedef ::xsd::cxx::tree::optional< Cylinder_type > Cylinder_optional;
  typedef ::xsd::cxx::tree::traits< Cylinder_type, char > Cylinder_traits;

  const Cylinder_optional&
  Cylinder () const;

  Cylinder_optional&
  Cylinder ();

  void
  Cylinder (const Cylinder_type& x);

  void
  Cylinder (const Cylinder_optional& x);

  void
  Cylinder (::std::auto_ptr< Cylinder_type > p);

  // Constructors.
  //
  CorneaBoundaryType ();

  CorneaBoundaryType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  CorneaBoundaryType (const CorneaBoundaryType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual CorneaBoundaryType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  CorneaBoundaryType&
  operator= (const CorneaBoundaryType& x);

  virtual 
  ~CorneaBoundaryType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Cone_optional Cone_;
  Cylinder_optional Cylinder_;
};

class CorneaMeshingParametersType: public ::xml_schema::type
{
  public:
  // AnteriorSurface
  //
  typedef ::ZernikeSurfaceType AnteriorSurface_type;
  typedef ::xsd::cxx::tree::traits< AnteriorSurface_type, char > AnteriorSurface_traits;

  const AnteriorSurface_type&
  AnteriorSurface () const;

  AnteriorSurface_type&
  AnteriorSurface ();

  void
  AnteriorSurface (const AnteriorSurface_type& x);

  void
  AnteriorSurface (::std::auto_ptr< AnteriorSurface_type > p);

  // PosteriorSurface
  //
  typedef ::ZernikeSurfaceType PosteriorSurface_type;
  typedef ::xsd::cxx::tree::traits< PosteriorSurface_type, char > PosteriorSurface_traits;

  const PosteriorSurface_type&
  PosteriorSurface () const;

  PosteriorSurface_type&
  PosteriorSurface ();

  void
  PosteriorSurface (const PosteriorSurface_type& x);

  void
  PosteriorSurface (::std::auto_ptr< PosteriorSurface_type > p);

  // PosteriorSurfaceLenticule
  //
  typedef ::ZernikeSurfaceType PosteriorSurfaceLenticule_type;
  typedef ::xsd::cxx::tree::optional< PosteriorSurfaceLenticule_type > PosteriorSurfaceLenticule_optional;
  typedef ::xsd::cxx::tree::traits< PosteriorSurfaceLenticule_type, char > PosteriorSurfaceLenticule_traits;

  const PosteriorSurfaceLenticule_optional&
  PosteriorSurfaceLenticule () const;

  PosteriorSurfaceLenticule_optional&
  PosteriorSurfaceLenticule ();

  void
  PosteriorSurfaceLenticule (const PosteriorSurfaceLenticule_type& x);

  void
  PosteriorSurfaceLenticule (const PosteriorSurfaceLenticule_optional& x);

  void
  PosteriorSurfaceLenticule (::std::auto_ptr< PosteriorSurfaceLenticule_type > p);

  // PupilRadius
  //
  typedef ::xml_schema::float_ PupilRadius_type;
  typedef ::xsd::cxx::tree::traits< PupilRadius_type, char > PupilRadius_traits;

  const PupilRadius_type&
  PupilRadius () const;

  PupilRadius_type&
  PupilRadius ();

  void
  PupilRadius (const PupilRadius_type& x);

  // SurfaceDistance
  //
  typedef ::xml_schema::float_ SurfaceDistance_type;
  typedef ::xsd::cxx::tree::traits< SurfaceDistance_type, char > SurfaceDistance_traits;

  const SurfaceDistance_type&
  SurfaceDistance () const;

  SurfaceDistance_type&
  SurfaceDistance ();

  void
  SurfaceDistance (const SurfaceDistance_type& x);

  // MeshCriteria
  //
  typedef ::MeshCriteriaGlobalType MeshCriteria_type;
  typedef ::xsd::cxx::tree::traits< MeshCriteria_type, char > MeshCriteria_traits;

  const MeshCriteria_type&
  MeshCriteria () const;

  MeshCriteria_type&
  MeshCriteria ();

  void
  MeshCriteria (const MeshCriteria_type& x);

  void
  MeshCriteria (::std::auto_ptr< MeshCriteria_type > p);

  // CorneaGenerationCriteria
  //
  typedef ::CorneaGenerationCriteriaGlobalType CorneaGenerationCriteria_type;
  typedef ::xsd::cxx::tree::traits< CorneaGenerationCriteria_type, char > CorneaGenerationCriteria_traits;

  const CorneaGenerationCriteria_type&
  CorneaGenerationCriteria () const;

  CorneaGenerationCriteria_type&
  CorneaGenerationCriteria ();

  void
  CorneaGenerationCriteria (const CorneaGenerationCriteria_type& x);

  void
  CorneaGenerationCriteria (::std::auto_ptr< CorneaGenerationCriteria_type > p);

  // LenticuleGenerationCriteria
  //
  typedef ::LenticuleGenerationCriteriaGlobalType LenticuleGenerationCriteria_type;
  typedef ::xsd::cxx::tree::optional< LenticuleGenerationCriteria_type > LenticuleGenerationCriteria_optional;
  typedef ::xsd::cxx::tree::traits< LenticuleGenerationCriteria_type, char > LenticuleGenerationCriteria_traits;

  const LenticuleGenerationCriteria_optional&
  LenticuleGenerationCriteria () const;

  LenticuleGenerationCriteria_optional&
  LenticuleGenerationCriteria ();

  void
  LenticuleGenerationCriteria (const LenticuleGenerationCriteria_type& x);

  void
  LenticuleGenerationCriteria (const LenticuleGenerationCriteria_optional& x);

  void
  LenticuleGenerationCriteria (::std::auto_ptr< LenticuleGenerationCriteria_type > p);

  // CorneaBoundary
  //
  typedef ::CorneaBoundaryType CorneaBoundary_type;
  typedef ::xsd::cxx::tree::traits< CorneaBoundary_type, char > CorneaBoundary_traits;

  const CorneaBoundary_type&
  CorneaBoundary () const;

  CorneaBoundary_type&
  CorneaBoundary ();

  void
  CorneaBoundary (const CorneaBoundary_type& x);

  void
  CorneaBoundary (::std::auto_ptr< CorneaBoundary_type > p);

  // Constructors.
  //
  CorneaMeshingParametersType (const AnteriorSurface_type&,
                               const PosteriorSurface_type&,
                               const PupilRadius_type&,
                               const SurfaceDistance_type&,
                               const MeshCriteria_type&,
                               const CorneaGenerationCriteria_type&,
                               const CorneaBoundary_type&);

  CorneaMeshingParametersType (::std::auto_ptr< AnteriorSurface_type >,
                               ::std::auto_ptr< PosteriorSurface_type >,
                               const PupilRadius_type&,
                               const SurfaceDistance_type&,
                               ::std::auto_ptr< MeshCriteria_type >,
                               ::std::auto_ptr< CorneaGenerationCriteria_type >,
                               ::std::auto_ptr< CorneaBoundary_type >);

  CorneaMeshingParametersType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  CorneaMeshingParametersType (const CorneaMeshingParametersType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  virtual CorneaMeshingParametersType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  CorneaMeshingParametersType&
  operator= (const CorneaMeshingParametersType& x);

  virtual 
  ~CorneaMeshingParametersType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< AnteriorSurface_type > AnteriorSurface_;
  ::xsd::cxx::tree::one< PosteriorSurface_type > PosteriorSurface_;
  PosteriorSurfaceLenticule_optional PosteriorSurfaceLenticule_;
  ::xsd::cxx::tree::one< PupilRadius_type > PupilRadius_;
  ::xsd::cxx::tree::one< SurfaceDistance_type > SurfaceDistance_;
  ::xsd::cxx::tree::one< MeshCriteria_type > MeshCriteria_;
  ::xsd::cxx::tree::one< CorneaGenerationCriteria_type > CorneaGenerationCriteria_;
  LenticuleGenerationCriteria_optional LenticuleGenerationCriteria_;
  ::xsd::cxx::tree::one< CorneaBoundary_type > CorneaBoundary_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::CorneaMeshingParametersType >
CorneaMeshingParameters (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CorneaMeshingParametersType >
CorneaMeshingParameters (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CorneaMeshingParametersType >
CorneaMeshingParameters (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::CorneaMeshingParametersType >
CorneaMeshingParameters (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CorneaMeshingParametersType >
CorneaMeshingParameters (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CorneaMeshingParametersType >
CorneaMeshingParameters (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CorneaMeshingParametersType >
CorneaMeshingParameters (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CorneaMeshingParametersType >
CorneaMeshingParameters (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CorneaMeshingParametersType >
CorneaMeshingParameters (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::CorneaMeshingParametersType >
CorneaMeshingParameters (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CorneaMeshingParametersType >
CorneaMeshingParameters (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CorneaMeshingParametersType >
CorneaMeshingParameters (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::CorneaMeshingParametersType >
CorneaMeshingParameters (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CorneaMeshingParametersType >
CorneaMeshingParameters (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CORNEA_MESHING_SCHEMA_HXX

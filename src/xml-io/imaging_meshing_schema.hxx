// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef IMAGING_MESHING_SCHEMA_HXX
#define IMAGING_MESHING_SCHEMA_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class MeshTool_Config_t;
class Operation_Image2Mesh_t;
class MeshCriteria_global_t;
class MeshCriteria_SubDomain_t;
class Operation_Remesh_t;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class MeshTool_Config_t: public ::xml_schema::type
{
  public:
  // Operation_Image2Mesh
  //
  typedef ::Operation_Image2Mesh_t Operation_Image2Mesh_type;
  typedef ::xsd::cxx::tree::optional< Operation_Image2Mesh_type > Operation_Image2Mesh_optional;
  typedef ::xsd::cxx::tree::traits< Operation_Image2Mesh_type, char > Operation_Image2Mesh_traits;

  const Operation_Image2Mesh_optional&
  Operation_Image2Mesh () const;

  Operation_Image2Mesh_optional&
  Operation_Image2Mesh ();

  void
  Operation_Image2Mesh (const Operation_Image2Mesh_type& x);

  void
  Operation_Image2Mesh (const Operation_Image2Mesh_optional& x);

  void
  Operation_Image2Mesh (::std::auto_ptr< Operation_Image2Mesh_type > p);

  // Operation_Remesh
  //
  typedef ::Operation_Remesh_t Operation_Remesh_type;
  typedef ::xsd::cxx::tree::optional< Operation_Remesh_type > Operation_Remesh_optional;
  typedef ::xsd::cxx::tree::traits< Operation_Remesh_type, char > Operation_Remesh_traits;

  const Operation_Remesh_optional&
  Operation_Remesh () const;

  Operation_Remesh_optional&
  Operation_Remesh ();

  void
  Operation_Remesh (const Operation_Remesh_type& x);

  void
  Operation_Remesh (const Operation_Remesh_optional& x);

  void
  Operation_Remesh (::std::auto_ptr< Operation_Remesh_type > p);

  // Constructors.
  //
  MeshTool_Config_t ();

  MeshTool_Config_t (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  MeshTool_Config_t (const MeshTool_Config_t& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual MeshTool_Config_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  MeshTool_Config_t&
  operator= (const MeshTool_Config_t& x);

  virtual 
  ~MeshTool_Config_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Operation_Image2Mesh_optional Operation_Image2Mesh_;
  Operation_Remesh_optional Operation_Remesh_;
};

class Operation_Image2Mesh_t: public ::xml_schema::type
{
  public:
  // MeshCriteria_global
  //
  typedef ::MeshCriteria_global_t MeshCriteria_global_type;
  typedef ::xsd::cxx::tree::traits< MeshCriteria_global_type, char > MeshCriteria_global_traits;

  const MeshCriteria_global_type&
  MeshCriteria_global () const;

  MeshCriteria_global_type&
  MeshCriteria_global ();

  void
  MeshCriteria_global (const MeshCriteria_global_type& x);

  void
  MeshCriteria_global (::std::auto_ptr< MeshCriteria_global_type > p);

  // MeshCriteria_SubDomain
  //
  typedef ::MeshCriteria_SubDomain_t MeshCriteria_SubDomain_type;
  typedef ::xsd::cxx::tree::sequence< MeshCriteria_SubDomain_type > MeshCriteria_SubDomain_sequence;
  typedef MeshCriteria_SubDomain_sequence::iterator MeshCriteria_SubDomain_iterator;
  typedef MeshCriteria_SubDomain_sequence::const_iterator MeshCriteria_SubDomain_const_iterator;
  typedef ::xsd::cxx::tree::traits< MeshCriteria_SubDomain_type, char > MeshCriteria_SubDomain_traits;

  const MeshCriteria_SubDomain_sequence&
  MeshCriteria_SubDomain () const;

  MeshCriteria_SubDomain_sequence&
  MeshCriteria_SubDomain ();

  void
  MeshCriteria_SubDomain (const MeshCriteria_SubDomain_sequence& s);

  // path_to_input_file
  //
  typedef ::xml_schema::string path_to_input_file_type;
  typedef ::xsd::cxx::tree::traits< path_to_input_file_type, char > path_to_input_file_traits;

  const path_to_input_file_type&
  path_to_input_file () const;

  path_to_input_file_type&
  path_to_input_file ();

  void
  path_to_input_file (const path_to_input_file_type& x);

  void
  path_to_input_file (::std::auto_ptr< path_to_input_file_type > p);

  // path_to_output_file
  //
  typedef ::xml_schema::string path_to_output_file_type;
  typedef ::xsd::cxx::tree::traits< path_to_output_file_type, char > path_to_output_file_traits;

  const path_to_output_file_type&
  path_to_output_file () const;

  path_to_output_file_type&
  path_to_output_file ();

  void
  path_to_output_file (const path_to_output_file_type& x);

  void
  path_to_output_file (::std::auto_ptr< path_to_output_file_type > p);

  // Constructors.
  //
  Operation_Image2Mesh_t (const MeshCriteria_global_type&,
                          const path_to_input_file_type&,
                          const path_to_output_file_type&);

  Operation_Image2Mesh_t (::std::auto_ptr< MeshCriteria_global_type >,
                          const path_to_input_file_type&,
                          const path_to_output_file_type&);

  Operation_Image2Mesh_t (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  Operation_Image2Mesh_t (const Operation_Image2Mesh_t& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual Operation_Image2Mesh_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Operation_Image2Mesh_t&
  operator= (const Operation_Image2Mesh_t& x);

  virtual 
  ~Operation_Image2Mesh_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< MeshCriteria_global_type > MeshCriteria_global_;
  MeshCriteria_SubDomain_sequence MeshCriteria_SubDomain_;
  ::xsd::cxx::tree::one< path_to_input_file_type > path_to_input_file_;
  ::xsd::cxx::tree::one< path_to_output_file_type > path_to_output_file_;
};

class MeshCriteria_global_t: public ::xml_schema::type
{
  public:
  // facet_angle
  //
  typedef ::xml_schema::double_ facet_angle_type;
  typedef ::xsd::cxx::tree::traits< facet_angle_type, char, ::xsd::cxx::tree::schema_type::double_ > facet_angle_traits;

  const facet_angle_type&
  facet_angle () const;

  facet_angle_type&
  facet_angle ();

  void
  facet_angle (const facet_angle_type& x);

  // facet_size
  //
  typedef ::xml_schema::double_ facet_size_type;
  typedef ::xsd::cxx::tree::traits< facet_size_type, char, ::xsd::cxx::tree::schema_type::double_ > facet_size_traits;

  const facet_size_type&
  facet_size () const;

  facet_size_type&
  facet_size ();

  void
  facet_size (const facet_size_type& x);

  // facet_distance
  //
  typedef ::xml_schema::double_ facet_distance_type;
  typedef ::xsd::cxx::tree::traits< facet_distance_type, char, ::xsd::cxx::tree::schema_type::double_ > facet_distance_traits;

  const facet_distance_type&
  facet_distance () const;

  facet_distance_type&
  facet_distance ();

  void
  facet_distance (const facet_distance_type& x);

  // cell_radius_edge_ratio
  //
  typedef ::xml_schema::double_ cell_radius_edge_ratio_type;
  typedef ::xsd::cxx::tree::traits< cell_radius_edge_ratio_type, char, ::xsd::cxx::tree::schema_type::double_ > cell_radius_edge_ratio_traits;

  const cell_radius_edge_ratio_type&
  cell_radius_edge_ratio () const;

  cell_radius_edge_ratio_type&
  cell_radius_edge_ratio ();

  void
  cell_radius_edge_ratio (const cell_radius_edge_ratio_type& x);

  // cell_size
  //
  typedef ::xml_schema::double_ cell_size_type;
  typedef ::xsd::cxx::tree::traits< cell_size_type, char, ::xsd::cxx::tree::schema_type::double_ > cell_size_traits;

  const cell_size_type&
  cell_size () const;

  cell_size_type&
  cell_size ();

  void
  cell_size (const cell_size_type& x);

  // Constructors.
  //
  MeshCriteria_global_t (const facet_angle_type&,
                         const facet_size_type&,
                         const facet_distance_type&,
                         const cell_radius_edge_ratio_type&,
                         const cell_size_type&);

  MeshCriteria_global_t (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  MeshCriteria_global_t (const MeshCriteria_global_t& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  virtual MeshCriteria_global_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  MeshCriteria_global_t&
  operator= (const MeshCriteria_global_t& x);

  virtual 
  ~MeshCriteria_global_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< facet_angle_type > facet_angle_;
  ::xsd::cxx::tree::one< facet_size_type > facet_size_;
  ::xsd::cxx::tree::one< facet_distance_type > facet_distance_;
  ::xsd::cxx::tree::one< cell_radius_edge_ratio_type > cell_radius_edge_ratio_;
  ::xsd::cxx::tree::one< cell_size_type > cell_size_;
};

class MeshCriteria_SubDomain_t: public ::xml_schema::type
{
  public:
  // domain_id
  //
  typedef ::xml_schema::int_ domain_id_type;
  typedef ::xsd::cxx::tree::traits< domain_id_type, char > domain_id_traits;

  const domain_id_type&
  domain_id () const;

  domain_id_type&
  domain_id ();

  void
  domain_id (const domain_id_type& x);

  // cell_size
  //
  typedef ::xml_schema::double_ cell_size_type;
  typedef ::xsd::cxx::tree::traits< cell_size_type, char, ::xsd::cxx::tree::schema_type::double_ > cell_size_traits;

  const cell_size_type&
  cell_size () const;

  cell_size_type&
  cell_size ();

  void
  cell_size (const cell_size_type& x);

  // dimension
  //
  typedef ::xml_schema::int_ dimension_type;
  typedef ::xsd::cxx::tree::traits< dimension_type, char > dimension_traits;

  const dimension_type&
  dimension () const;

  dimension_type&
  dimension ();

  void
  dimension (const dimension_type& x);

  static dimension_type
  dimension_default_value ();

  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::optional< name_type > name_optional;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_optional&
  name () const;

  name_optional&
  name ();

  void
  name (const name_type& x);

  void
  name (const name_optional& x);

  void
  name (::std::auto_ptr< name_type > p);

  // Constructors.
  //
  MeshCriteria_SubDomain_t (const domain_id_type&,
                            const cell_size_type&);

  MeshCriteria_SubDomain_t (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  MeshCriteria_SubDomain_t (const MeshCriteria_SubDomain_t& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  virtual MeshCriteria_SubDomain_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  MeshCriteria_SubDomain_t&
  operator= (const MeshCriteria_SubDomain_t& x);

  virtual 
  ~MeshCriteria_SubDomain_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< domain_id_type > domain_id_;
  ::xsd::cxx::tree::one< cell_size_type > cell_size_;
  ::xsd::cxx::tree::one< dimension_type > dimension_;
  name_optional name_;
};

class Operation_Remesh_t: public ::Operation_Image2Mesh_t
{
  public:
  // spacing_xyz
  //
  typedef ::xml_schema::double_ spacing_xyz_type;
  typedef ::xsd::cxx::tree::traits< spacing_xyz_type, char, ::xsd::cxx::tree::schema_type::double_ > spacing_xyz_traits;

  const spacing_xyz_type&
  spacing_xyz () const;

  spacing_xyz_type&
  spacing_xyz ();

  void
  spacing_xyz (const spacing_xyz_type& x);

  // Constructors.
  //
  Operation_Remesh_t (const MeshCriteria_global_type&,
                      const path_to_input_file_type&,
                      const path_to_output_file_type&,
                      const spacing_xyz_type&);

  Operation_Remesh_t (::std::auto_ptr< MeshCriteria_global_type >,
                      const path_to_input_file_type&,
                      const path_to_output_file_type&,
                      const spacing_xyz_type&);

  Operation_Remesh_t (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  Operation_Remesh_t (const Operation_Remesh_t& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual Operation_Remesh_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Operation_Remesh_t&
  operator= (const Operation_Remesh_t& x);

  virtual 
  ~Operation_Remesh_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< spacing_xyz_type > spacing_xyz_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::MeshTool_Config_t >
MeshTool_Config (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MeshTool_Config_t >
MeshTool_Config (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MeshTool_Config_t >
MeshTool_Config (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::MeshTool_Config_t >
MeshTool_Config (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MeshTool_Config_t >
MeshTool_Config (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MeshTool_Config_t >
MeshTool_Config (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MeshTool_Config_t >
MeshTool_Config (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MeshTool_Config_t >
MeshTool_Config (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MeshTool_Config_t >
MeshTool_Config (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::MeshTool_Config_t >
MeshTool_Config (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MeshTool_Config_t >
MeshTool_Config (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MeshTool_Config_t >
MeshTool_Config (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::MeshTool_Config_t >
MeshTool_Config (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MeshTool_Config_t >
MeshTool_Config (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // IMAGING_MESHING_SCHEMA_HXX
